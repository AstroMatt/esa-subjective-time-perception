# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-31 15:02
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.NullBooleanField(default=None)),
                ('uid', models.EmailField(db_index=True, max_length=254, verbose_name='User ID')),
                ('start_datetime', models.DateTimeField(db_index=True, verbose_name='Start datetime')),
                ('end_datetime', models.DateTimeField(verbose_name='End datetime')),
                ('location', models.CharField(db_index=True, max_length=50, verbose_name='Location')),
                ('device', models.CharField(max_length=50, verbose_name='Device')),
                ('polarization', models.CharField(max_length=50, verbose_name='Polarization')),
                ('timeout', models.FloatField(help_text='Seconds per color', verbose_name='Timeout')),
                ('regularity', models.PositiveSmallIntegerField(help_text='Click every X seconds', verbose_name='Reqularity')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email')),
                ('age', models.PositiveSmallIntegerField(verbose_name='Age')),
                ('condition', models.CharField(max_length=50, verbose_name='Condition')),
                ('gender', models.CharField(max_length=50, verbose_name='Gender')),
                ('rhythm', models.CharField(max_length=50, verbose_name='Rhythm')),
                ('count_all_trial1', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 1] Count click events - all', null=True, verbose_name='C_1')),
                ('count_all_trial2', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 2] Count click events - all', null=True, verbose_name='C_2')),
                ('count_blue_trial1', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 1] Count click events - blue', null=True, verbose_name='CB1')),
                ('count_blue_trial2', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 2] Count click events - blue', null=True, verbose_name='CB2')),
                ('count_red_trial1', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 1] Count click events - red', null=True, verbose_name='CR1')),
                ('count_red_trial2', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 2] Count click events - red', null=True, verbose_name='CR2')),
                ('count_white_trial1', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 1] Count click events - white', null=True, verbose_name='CW1')),
                ('count_white_trial2', models.PositiveSmallIntegerField(blank=True, help_text='[Trial 2] Count click events - white', null=True, verbose_name='CW2')),
                ('percentage_all_trial1', models.FloatField(blank=True, help_text='[Trial 1] Percentage Coefficient - all', null=True, verbose_name='P_1')),
                ('percentage_all_trial2', models.FloatField(blank=True, help_text='[Trial 2] Percentage Coefficient - all', null=True, verbose_name='P_2')),
                ('percentage_blue_trial1', models.FloatField(blank=True, help_text='[Trial 1] Percentage Coefficient - blue', null=True, verbose_name='PB1')),
                ('percentage_blue_trial2', models.FloatField(blank=True, help_text='[Trial 2] Percentage Coefficient - blue', null=True, verbose_name='PB2')),
                ('percentage_red_trial1', models.FloatField(blank=True, help_text='[Trial 1] Percentage Coefficient - red', null=True, verbose_name='PR1')),
                ('percentage_red_trial2', models.FloatField(blank=True, help_text='[Trial 2] Percentage Coefficient - red', null=True, verbose_name='PR2')),
                ('percentage_white_trial1', models.FloatField(blank=True, help_text='[Trial 1] Percentage Coefficient - white', null=True, verbose_name='PW1')),
                ('percentage_white_trial2', models.FloatField(blank=True, help_text='[Trial 2] Percentage Coefficient - white', null=True, verbose_name='PW2')),
                ('time_stdev_all_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Standard Deviation - all', null=True, verbose_name='TSD_1')),
                ('time_stdev_all_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Standard Deviation - all', null=True, verbose_name='TSD_2')),
                ('time_stdev_blue_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Standard Deviation - blue', null=True, verbose_name='TSDB1')),
                ('time_stdev_blue_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Standard Deviation - blue', null=True, verbose_name='TSDB2')),
                ('time_stdev_red_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Standard Deviation - red', null=True, verbose_name='TSDR1')),
                ('time_stdev_red_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Standard Deviation - red', null=True, verbose_name='TSDR2')),
                ('time_stdev_white_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Standard Deviation - white', null=True, verbose_name='TSDW1')),
                ('time_stdev_white_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Standard Deviation - white', null=True, verbose_name='TSDW2')),
                ('time_mean_all_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Mean - all', null=True, verbose_name='TM_1')),
                ('time_mean_all_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Mean - all', null=True, verbose_name='TM_2')),
                ('time_mean_blue_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Mean - blue', null=True, verbose_name='TMB1')),
                ('time_mean_blue_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Mean - blue', null=True, verbose_name='TMB2')),
                ('time_mean_red_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Mean - red', null=True, verbose_name='TMR1')),
                ('time_mean_red_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Mean - red', null=True, verbose_name='TMR2')),
                ('time_mean_white_trial1', models.FloatField(blank=True, help_text='[Trial 1] Time Coefficient Mean - white', null=True, verbose_name='TMW1')),
                ('time_mean_white_trial2', models.FloatField(blank=True, help_text='[Trial 2] Time Coefficient Mean - white', null=True, verbose_name='TMW2')),
            ],
            options={
                'verbose_name': 'Experiment',
                'verbose_name_plural': 'Experiments',
                'ordering': ['-start_datetime'],
            },
        ),
    ]
